{
  "address": "0xB2E999a4634c9d6BC540Fbd067D149540307eFc1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleroot",
          "type": "bytes32"
        }
      ],
      "name": "Finalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "callData",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resignOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "updateTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x65c3c99abdecad194368f34789bd3e88a3e82559de5dcbbe20fbbed473c83217",
  "receipt": {
    "to": null,
    "from": "0x2e6bE9855A3bF02C73Ba74B7d756a63DB7762238",
    "contractAddress": "0xB2E999a4634c9d6BC540Fbd067D149540307eFc1",
    "transactionIndex": 16,
    "gasUsed": "1192016",
    "logsBloom": "0x
    "blockHash": "0xfcce12b66432d1491159b6b8924be6a08676df4d3061ff8d49e699cf770b58df",
    "transactionHash": "0x65c3c99abdecad194368f34789bd3e88a3e82559de5dcbbe20fbbed473c83217",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 6246006,
        "transactionHash": "0x65c3c99abdecad194368f34789bd3e88a3e82559de5dcbbe20fbbed473c83217",
        "address": "0xB2E999a4634c9d6BC540Fbd067D149540307eFc1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002e6be9855a3bf02c73ba74b7d756a63db7762238"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xfcce12b66432d1491159b6b8924be6a08676df4d3061ff8d49e699cf770b58df"
      }
    ],
    "blockNumber": 6246006,
    "cumulativeGasUsed": "1700946",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9cb17cafb54a33799e572b3a1d761130",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleroot\",\"type\":\"bytes32\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"callData\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resignOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"updateTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.\",\"params\":{\"interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise\"}},\"transferOwnership(address)\":{\"params\":{\"newOwner\":\"The address of the new owner of the contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"finalize()\":{\"notice\":\"\\ubc30\\ud3ec \\uc885\\ub8cc \\ub0a8\\uc740 \\ud1a0\\ud070\\uc744 \\uc624\\ub108\\uc5d0\\uac8c \\uc804\\uc1a1\\ud558\\uace0, \\uac00\\uc2a4\\ub97c \\ub0ad\\ube44\\ud558\\uc9c0 \\uc54a\\ub3c4\\ub85d MerkleRoot\\ub97c 0\\uc73c\\ub85c \\ubcc0\\uacbd\\ud55c\\ub2e4.\"},\"owner()\":{\"notice\":\"Get the address of the owner\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"transferOwnership(address)\":{\"notice\":\"Set the address of the new owner of the contract\"},\"updateTree(bytes32)\":{\"notice\":\"\\ud074\\ub808\\uc784\\ub41c \\ube44\\ud2b8\\ub9f5\\uc744 \\uc720\\uc9c0\\ud558\\uba74\\uc11c, \\uc0c8\\ub85c\\uc6b4 \\ud2b8\\ub9ac\\ub97c \\ub4f1\\ub85d\\ud569\\ub2c8\\ub2e4.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/MerkleDistributor.sol\":\"MerkleDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":42069},\"remappings\":[]},\"sources\":{\"@beandao/contracts/interfaces/IERC165.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x926a161685c9d85f47e1f40a00c2ec6d724dd40e31075ddadf757b3b919761ac\",\"license\":\"LGPL-3.0-or-later\"},\"@beandao/contracts/interfaces/IERC173.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC-173 Contract Ownership Standard\\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-173.md\\n * Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n */\\ninterface IERC173 {\\n    /**\\n     * @dev This emits when ownership of a contract changes.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @notice Get the address of the owner\\n     * @return The address of the owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Set the address of the new owner of the contract\\n     * @param newOwner The address of the new owner of the contract\\n     */\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x0ba55f97268661fa524bc5f452c53067af5331b82e51cc7f3ce7640897540bf1\",\"license\":\"LGPL-3.0-or-later\"},\"@beandao/contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function balanceOf(address target) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xecd385c0b84b876e7a44b8765e0ad788c7bbde5383c07c650be0476f37e30924\",\"license\":\"LGPL-3.0-or-later\"},\"@beandao/contracts/interfaces/IMulticall.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMulticall {\\n    function multicall(bytes[] calldata callData) external returns (bytes[] memory returnData);\\n}\\n\",\"keccak256\":\"0x5f3a7ed9a0c3e8b4c73341b29cb89c5c19edfb2dd070694ccbde6af9aa45044f\",\"license\":\"LGPL-3.0-or-later\"},\"@beandao/contracts/library/Address.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n    function isContract(address target) internal view returns (bool result) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            result := gt(extcodesize(target), 0)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb8faa1b47376b255e2f37190ca28a76fd880369c7fcd468cc71fde6fe65d9710\",\"license\":\"LGPL-3.0-or-later\"},\"@beandao/contracts/library/Initializer.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\nabstract contract Initializer {\\n    using Address for address;\\n\\n    bool private _initialized;\\n\\n    modifier initializer() {\\n        require(!_initialized || !address(this).isContract(), \\\"Initializer/Already Initialized\\\");\\n        _initialized = true;\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x141755fb41b1a810fa4f2a6e912ed6390402fe9cd9bdcbad5e96edfcc44ed1d6\",\"license\":\"LGPL-3.0-or-later\"},\"@beandao/contracts/library/Multicall.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IMulticall.sol\\\";\\n\\n/**\\n * @title Multicall\\n * @author yoonsung.eth\\n * @notice \\ucee8\\ud2b8\\ub799\\ud2b8\\uac00 \\uac00\\uc9c0\\uace0 \\uc788\\ub294 \\ud2b8\\ub79c\\uc7ad\\uc158\\uc744 \\uc21c\\uc11c\\ub300\\ub85c \\uc2e4\\ud589\\uc2dc\\ud0ac \\uc218 \\uc788\\uc74c.\\n */\\nabstract contract Multicall is IMulticall {\\n    function multicall(bytes[] calldata callData) external override returns (bytes[] memory returnData) {\\n        returnData = new bytes[](callData.length);\\n        for (uint256 i = 0; i < callData.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(callData[i]);\\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n            if (!success) {\\n                // revert called without a message\\n                if (result.length < 68) revert();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            returnData[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x299ab7b874b9cce8b2d826005fbde9e7e5e06e415922f9e242b6fb3e86dcb914\",\"license\":\"LGPL-3.0-or-later\"},\"@beandao/contracts/library/Ownership.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: LGPL-3.0-or-later\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC173.sol\\\";\\n\\n/**\\n * @title Ownership\\n * @author yoonsung.eth\\n * @notice \\ub2e8\\uc77c Ownership\\uc744 \\uac00\\uc9c8 \\uc218 \\uc788\\ub3c4\\ub85d \\ub3c4\\uc640\\uc8fc\\ub294 \\ucd94\\uc0c1 \\ucee8\\ud2b8\\ub799\\ud2b8\\n * @dev constructor \\uae30\\ubc18 \\ucee8\\ud2b8\\ub799\\ud2b8\\uc5d0\\uc11c\\ub294 \\uc0dd\\uc131 \\uc2dc\\uc810\\uc5d0 owner\\uac00 msg.sender\\ub85c \\uc9c0\\uc815\\ub418\\uba70,\\n *      Proxy\\ub85c \\uc791\\ub3d9\\ub418\\ub294 \\ucee8\\ud2b8\\ub799\\ud2b8\\uc758 \\uacbd\\uc6b0 `__transferOwnership(address)`\\ub97c \\uba85\\uc2dc\\uc801\\uc73c\\ub85c \\ud638\\ucd9c\\ud558\\uc5ec owner\\ub97c \\uc9c0\\uc815\\ud558\\uc5ec\\uc57c \\ud55c\\ub2e4.\\n */\\nabstract contract Ownership is IERC173 {\\n    address public override owner;\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownership/Not-Authorized\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    function transferOwnership(address newOwner) external virtual override onlyOwner {\\n        require(newOwner != address(0), \\\"Ownership/Not-Allowed-Zero\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function resignOwnership() external virtual onlyOwner {\\n        delete owner;\\n        emit OwnershipTransferred(msg.sender, address(0));\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        address prev = owner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(prev, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6d58adf2a3a2e93b54f9f34fdffdcec669dbd6985c5de884dbb321fc0d5a7385\",\"license\":\"LGPL-3.0-or-later\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"contracts/utils/MerkleDistributor.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Origin by https://github.com/Uniswap/merkle-distributor\\n */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@beandao/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@beandao/contracts/interfaces/IERC165.sol\\\";\\nimport {Initializer} from \\\"@beandao/contracts/library/Initializer.sol\\\";\\nimport {Ownership, IERC173} from \\\"@beandao/contracts/library/Ownership.sol\\\";\\nimport {Multicall, IMulticall} from \\\"@beandao/contracts/library/Multicall.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract MerkleDistributor is Multicall, Ownership, Initializer, IERC165 {\\n    IERC20 public token;\\n    bytes32 public root;\\n    mapping(uint256 => uint256) private claimedIndex;\\n\\n    event Claimed(uint256 index, address account, uint256 amount);\\n    event Finalized(address token, bytes32 merkleroot);\\n\\n    function initialize(address tokenAddr, bytes32 merkleRoot) external initializer {\\n        _transferOwnership(msg.sender);\\n        token = IERC20(tokenAddr);\\n        root = merkleRoot;\\n    }\\n\\n    function isClaimed(uint256 index) public view returns (bool) {\\n        uint256 claimedWordIndex = index / 256;\\n        uint256 claimedBitIndex = index % 256;\\n        uint256 claimedWord = claimedIndex[claimedWordIndex];\\n        uint256 mask = (1 << claimedBitIndex);\\n        return claimedWord & mask == mask;\\n    }\\n\\n    function _setClaimed(uint256 index) private {\\n        uint256 claimedWordIndex = index / 256;\\n        uint256 claimedBitIndex = index % 256;\\n        claimedIndex[claimedWordIndex] = claimedIndex[claimedWordIndex] | (1 << claimedBitIndex);\\n    }\\n\\n    function claim(\\n        uint256 index,\\n        address account,\\n        uint256 amount,\\n        bytes32[] calldata merkleProof\\n    ) external {\\n        require(!isClaimed(index), \\\"MerkleDistributor/Already claimed\\\");\\n\\n        // Verify the merkle proof.\\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\\n        require(MerkleProof.verify(merkleProof, root, node), \\\"MerkleDistributor/Invalid proof\\\");\\n\\n        // Mark it claimed and send the token.\\n        _setClaimed(index);\\n        token.transfer(account, amount);\\n\\n        emit Claimed(index, account, amount);\\n    }\\n\\n    /**\\n     * \\ud074\\ub808\\uc784\\ub41c \\ube44\\ud2b8\\ub9f5\\uc744 \\uc720\\uc9c0\\ud558\\uba74\\uc11c, \\uc0c8\\ub85c\\uc6b4 \\ud2b8\\ub9ac\\ub97c \\ub4f1\\ub85d\\ud569\\ub2c8\\ub2e4.\\n     */\\n    function updateTree(bytes32 merkleRoot) external onlyOwner {\\n        require(merkleRoot != bytes32(0), \\\"MerkleDistributor/Invalid Input\\\");\\n        root = merkleRoot;\\n    }\\n\\n    /**\\n     * \\ubc30\\ud3ec \\uc885\\ub8cc\\n     * \\ub0a8\\uc740 \\ud1a0\\ud070\\uc744 \\uc624\\ub108\\uc5d0\\uac8c \\uc804\\uc1a1\\ud558\\uace0, \\uac00\\uc2a4\\ub97c \\ub0ad\\ube44\\ud558\\uc9c0 \\uc54a\\ub3c4\\ub85d MerkleRoot\\ub97c 0\\uc73c\\ub85c \\ubcc0\\uacbd\\ud55c\\ub2e4.\\n     */\\n    function finalize() external onlyOwner {\\n        uint256 balance = token.balanceOf(address(this));\\n        token.transfer(msg.sender, balance);\\n        root = bytes32(0);\\n        emit Finalized(address(token), root);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\\n        return\\n            interfaceID == type(IERC165).interfaceId ||\\n            interfaceID == type(IERC173).interfaceId ||\\n            interfaceID == type(IMulticall).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x7dcf7081e1ae9c566e7eb0b88edb97f72c09e6f8483e8b26135bbce261a90129\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36114568061005f6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063ac9650d811610081578063ed0c70911161005b578063ed0c7091146101d3578063f2fde38b146101db578063fc0c546a146101ee57600080fd5b8063ac9650d814610189578063be13f47c146101a9578063ebf0c717146101bc57600080fd5b80634bb278f3116100b25780634bb278f3146101295780638da5cb5b146101315780639e34070f1461017657600080fd5b806301ffc9a7146100d95780630bc00849146101015780632e7ba6ef14610116575b600080fd5b6100ec6100e7366004610ebd565b61020e565b60405190151581526020015b60405180910390f35b61011461010f366004610f06565b6102f3565b005b610114610124366004610f94565b6103e5565b610114610685565b6000546101519073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f8565b6100ec610184366004610f06565b610894565b61019c610197366004610ffc565b6108d5565b6040516100f891906110b8565b6101146101b7366004611138565b610a47565b6101c560025481565b6040519081526020016100f8565b610114610b69565b6101146101e9366004611162565b610c3e565b6001546101519073ffffffffffffffffffffffffffffffffffffffff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a70000000000000000000000000000000000000000000000000000000014806102a157507fffffffff0000000000000000000000000000000000000000000000000000000082167f7f5828d000000000000000000000000000000000000000000000000000000000145b806102ed57507fffffffff0000000000000000000000000000000000000000000000000000000082167fac9650d800000000000000000000000000000000000000000000000000000000145b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869702f4e6f742d417574686f72697a6564000000000000000060448201526064015b60405180910390fd5b806103e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4d65726b6c654469737472696275746f722f496e76616c696420496e707574006044820152606401610370565b600255565b6103ee85610894565b1561047b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4d65726b6c654469737472696275746f722f416c726561647920636c61696d6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610370565b60408051602081018790527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b16918101919091526054810184905260009060740160405160208183030381529060405280519060200120905061051a838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506002549150849050610d48565b610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4d65726b6c654469737472696275746f722f496e76616c69642070726f6f66006044820152606401610370565b61058986610d5e565b6001546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790529091169063a9059cbb906044016020604051808303816000875af1158015610602573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610626919061117d565b506040805187815273ffffffffffffffffffffffffffffffffffffffff871660208201529081018590527f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed0269060600160405180910390a1505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610706576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869702f4e6f742d417574686f72697a656400000000000000006044820152606401610370565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610799919061119f565b6001546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af1158015610811573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610835919061117d565b50600060028190556001546040805173ffffffffffffffffffffffffffffffffffffffff909216825260208201929092527f9d7c9993665b78876f73d391eb3995778a8b9c234f8ea823436810222bd90a48910160405180910390a150565b6000806108a3610100846111e7565b905060006108b3610100856111fb565b60009283526003602052604090922054600190921b9182169091149392505050565b60608167ffffffffffffffff8111156108f0576108f061120f565b60405190808252806020026020018201604052801561092357816020015b606081526020019060019003908161090e5790505b50905060005b82811015610a4057600080308686858181106109475761094761123e565b9050602002810190610959919061126d565b6040516109679291906112d2565b600060405180830381855af49150503d80600081146109a2576040519150601f19603f3d011682016040523d82523d6000602084013e6109a7565b606091505b509150915081610a0d576044815110156109c057600080fd5b600481019050808060200190518101906109da91906112e2565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037091906113ad565b80848481518110610a2057610a2061123e565b602002602001018190525050508080610a38906113c0565b915050610929565b5092915050565b60005474010000000000000000000000000000000000000000900460ff161580610a705750303b155b610ad6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f496e697469616c697a65722f416c726561647920496e697469616c697a6564006044820152606401610370565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055610b1e33610d9c565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9390931692909217909155600255565b60005473ffffffffffffffffffffffffffffffffffffffff163314610bea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869702f4e6f742d417574686f72697a656400000000000000006044820152606401610370565b600080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3565b60005473ffffffffffffffffffffffffffffffffffffffff163314610cbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869702f4e6f742d417574686f72697a656400000000000000006044820152606401610370565b73ffffffffffffffffffffffffffffffffffffffff8116610d3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f776e6572736869702f4e6f742d416c6c6f7765642d5a65726f0000000000006044820152606401610370565b610d4581610d9c565b50565b600082610d558584610e11565b14949350505050565b6000610d6c610100836111e7565b90506000610d7c610100846111fb565b6000928352600360205260409092208054600190931b9092179091555050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815b8451811015610eb5576000858281518110610e3357610e3361123e565b60200260200101519050808311610e75576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610ea2565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080610ead816113c0565b915050610e16565b509392505050565b600060208284031215610ecf57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eff57600080fd5b9392505050565b600060208284031215610f1857600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610f4357600080fd5b919050565b60008083601f840112610f5a57600080fd5b50813567ffffffffffffffff811115610f7257600080fd5b6020830191508360208260051b8501011115610f8d57600080fd5b9250929050565b600080600080600060808688031215610fac57600080fd5b85359450610fbc60208701610f1f565b935060408601359250606086013567ffffffffffffffff811115610fdf57600080fd5b610feb88828901610f48565b969995985093965092949392505050565b6000806020838503121561100f57600080fd5b823567ffffffffffffffff81111561102657600080fd5b61103285828601610f48565b90969095509350505050565b60005b83811015611059578181015183820152602001611041565b83811115611068576000848401525b50505050565b6000815180845261108681602086016020860161103e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561112b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261111985835161106e565b945092850192908501906001016110df565b5092979650505050505050565b6000806040838503121561114b57600080fd5b61115483610f1f565b946020939093013593505050565b60006020828403121561117457600080fd5b610eff82610f1f565b60006020828403121561118f57600080fd5b81518015158114610eff57600080fd5b6000602082840312156111b157600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826111f6576111f66111b8565b500490565b60008261120a5761120a6111b8565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126112a257600080fd5b83018035915067ffffffffffffffff8211156112bd57600080fd5b602001915036819003821315610f8d57600080fd5b8183823760009101908152919050565b6000602082840312156112f457600080fd5b815167ffffffffffffffff8082111561130c57600080fd5b818401915084601f83011261132057600080fd5b8151818111156113325761133261120f565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156113785761137861120f565b8160405282815287602084870101111561139157600080fd5b6113a283602083016020880161103e565b979650505050505050565b602081526000610eff602083018461106e565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611419577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea264697066735822122035eb517c1cdbdba2b8541fa987bc028487605c027710d3814b40977b8a7c301264736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c8063ac9650d811610081578063ed0c70911161005b578063ed0c7091146101d3578063f2fde38b146101db578063fc0c546a146101ee57600080fd5b8063ac9650d814610189578063be13f47c146101a9578063ebf0c717146101bc57600080fd5b80634bb278f3116100b25780634bb278f3146101295780638da5cb5b146101315780639e34070f1461017657600080fd5b806301ffc9a7146100d95780630bc00849146101015780632e7ba6ef14610116575b600080fd5b6100ec6100e7366004610ebd565b61020e565b60405190151581526020015b60405180910390f35b61011461010f366004610f06565b6102f3565b005b610114610124366004610f94565b6103e5565b610114610685565b6000546101519073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f8565b6100ec610184366004610f06565b610894565b61019c610197366004610ffc565b6108d5565b6040516100f891906110b8565b6101146101b7366004611138565b610a47565b6101c560025481565b6040519081526020016100f8565b610114610b69565b6101146101e9366004611162565b610c3e565b6001546101519073ffffffffffffffffffffffffffffffffffffffff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a70000000000000000000000000000000000000000000000000000000014806102a157507fffffffff0000000000000000000000000000000000000000000000000000000082167f7f5828d000000000000000000000000000000000000000000000000000000000145b806102ed57507fffffffff0000000000000000000000000000000000000000000000000000000082167fac9650d800000000000000000000000000000000000000000000000000000000145b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869702f4e6f742d417574686f72697a6564000000000000000060448201526064015b60405180910390fd5b806103e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4d65726b6c654469737472696275746f722f496e76616c696420496e707574006044820152606401610370565b600255565b6103ee85610894565b1561047b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4d65726b6c654469737472696275746f722f416c726561647920636c61696d6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610370565b60408051602081018790527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b16918101919091526054810184905260009060740160405160208183030381529060405280519060200120905061051a838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506002549150849050610d48565b610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4d65726b6c654469737472696275746f722f496e76616c69642070726f6f66006044820152606401610370565b61058986610d5e565b6001546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790529091169063a9059cbb906044016020604051808303816000875af1158015610602573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610626919061117d565b506040805187815273ffffffffffffffffffffffffffffffffffffffff871660208201529081018590527f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed0269060600160405180910390a1505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610706576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869702f4e6f742d417574686f72697a656400000000000000006044820152606401610370565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610799919061119f565b6001546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af1158015610811573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610835919061117d565b50600060028190556001546040805173ffffffffffffffffffffffffffffffffffffffff909216825260208201929092527f9d7c9993665b78876f73d391eb3995778a8b9c234f8ea823436810222bd90a48910160405180910390a150565b6000806108a3610100846111e7565b905060006108b3610100856111fb565b60009283526003602052604090922054600190921b9182169091149392505050565b60608167ffffffffffffffff8111156108f0576108f061120f565b60405190808252806020026020018201604052801561092357816020015b606081526020019060019003908161090e5790505b50905060005b82811015610a4057600080308686858181106109475761094761123e565b9050602002810190610959919061126d565b6040516109679291906112d2565b600060405180830381855af49150503d80600081146109a2576040519150601f19603f3d011682016040523d82523d6000602084013e6109a7565b606091505b509150915081610a0d576044815110156109c057600080fd5b600481019050808060200190518101906109da91906112e2565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037091906113ad565b80848481518110610a2057610a2061123e565b602002602001018190525050508080610a38906113c0565b915050610929565b5092915050565b60005474010000000000000000000000000000000000000000900460ff161580610a705750303b155b610ad6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f496e697469616c697a65722f416c726561647920496e697469616c697a6564006044820152606401610370565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055610b1e33610d9c565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9390931692909217909155600255565b60005473ffffffffffffffffffffffffffffffffffffffff163314610bea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869702f4e6f742d417574686f72697a656400000000000000006044820152606401610370565b600080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3565b60005473ffffffffffffffffffffffffffffffffffffffff163314610cbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869702f4e6f742d417574686f72697a656400000000000000006044820152606401610370565b73ffffffffffffffffffffffffffffffffffffffff8116610d3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f776e6572736869702f4e6f742d416c6c6f7765642d5a65726f0000000000006044820152606401610370565b610d4581610d9c565b50565b600082610d558584610e11565b14949350505050565b6000610d6c610100836111e7565b90506000610d7c610100846111fb565b6000928352600360205260409092208054600190931b9092179091555050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815b8451811015610eb5576000858281518110610e3357610e3361123e565b60200260200101519050808311610e75576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610ea2565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080610ead816113c0565b915050610e16565b509392505050565b600060208284031215610ecf57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eff57600080fd5b9392505050565b600060208284031215610f1857600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610f4357600080fd5b919050565b60008083601f840112610f5a57600080fd5b50813567ffffffffffffffff811115610f7257600080fd5b6020830191508360208260051b8501011115610f8d57600080fd5b9250929050565b600080600080600060808688031215610fac57600080fd5b85359450610fbc60208701610f1f565b935060408601359250606086013567ffffffffffffffff811115610fdf57600080fd5b610feb88828901610f48565b969995985093965092949392505050565b6000806020838503121561100f57600080fd5b823567ffffffffffffffff81111561102657600080fd5b61103285828601610f48565b90969095509350505050565b60005b83811015611059578181015183820152602001611041565b83811115611068576000848401525b50505050565b6000815180845261108681602086016020860161103e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561112b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261111985835161106e565b945092850192908501906001016110df565b5092979650505050505050565b6000806040838503121561114b57600080fd5b61115483610f1f565b946020939093013593505050565b60006020828403121561117457600080fd5b610eff82610f1f565b60006020828403121561118f57600080fd5b81518015158114610eff57600080fd5b6000602082840312156111b157600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826111f6576111f66111b8565b500490565b60008261120a5761120a6111b8565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126112a257600080fd5b83018035915067ffffffffffffffff8211156112bd57600080fd5b602001915036819003821315610f8d57600080fd5b8183823760009101908152919050565b6000602082840312156112f457600080fd5b815167ffffffffffffffff8082111561130c57600080fd5b818401915084601f83011261132057600080fd5b8151818111156113325761133261120f565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156113785761137861120f565b8160405282815287602084870101111561139157600080fd5b6113a283602083016020880161103e565b979650505050505050565b602081526000610eff602083018461106e565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611419577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea264697066735822122035eb517c1cdbdba2b8541fa987bc028487605c027710d3814b40977b8a7c301264736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.",
        "params": {
          "interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "newOwner": "The address of the new owner of the contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "finalize()": {
        "notice": "배포 종료 남은 토큰을 오너에게 전송하고, 가스를 낭비하지 않도록 MerkleRoot를 0으로 변경한다."
      },
      "owner()": {
        "notice": "Get the address of the owner"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "transferOwnership(address)": {
        "notice": "Set the address of the new owner of the contract"
      },
      "updateTree(bytes32)": {
        "notice": "클레임된 비트맵을 유지하면서, 새로운 트리를 등록합니다."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2286,
        "contract": "contracts/utils/MerkleDistributor.sol:MerkleDistributor",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1818,
        "contract": "contracts/utils/MerkleDistributor.sol:MerkleDistributor",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4416,
        "contract": "contracts/utils/MerkleDistributor.sol:MerkleDistributor",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)136"
      },
      {
        "astId": 4418,
        "contract": "contracts/utils/MerkleDistributor.sol:MerkleDistributor",
        "label": "root",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 4422,
        "contract": "contracts/utils/MerkleDistributor.sol:MerkleDistributor",
        "label": "claimedIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)136": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}